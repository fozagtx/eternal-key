/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IInheritanceCore {
  export type TimeLockStruct = {
    distributionType: BigNumberish;
    unlockTime: BigNumberish;
    vestingDuration: BigNumberish;
    cliffDuration: BigNumberish;
    milestoneTimestamps: BigNumberish[];
    milestonePercentages: BigNumberish[];
  };

  export type TimeLockStructOutput = [
    distributionType: bigint,
    unlockTime: bigint,
    vestingDuration: bigint,
    cliffDuration: bigint,
    milestoneTimestamps: bigint[],
    milestonePercentages: bigint[]
  ] & {
    distributionType: bigint;
    unlockTime: bigint;
    vestingDuration: bigint;
    cliffDuration: bigint;
    milestoneTimestamps: bigint[];
    milestonePercentages: bigint[];
  };

  export type BeneficiaryStruct = {
    wallet: AddressLike;
    allocationBasisPoints: BigNumberish;
    isActive: boolean;
    claimedSTT: BigNumberish;
    addedAt: BigNumberish;
  };

  export type BeneficiaryStructOutput = [
    wallet: string,
    allocationBasisPoints: bigint,
    isActive: boolean,
    claimedSTT: bigint,
    addedAt: bigint
  ] & {
    wallet: string;
    allocationBasisPoints: bigint;
    isActive: boolean;
    claimedSTT: bigint;
    addedAt: bigint;
  };

  export type InheritanceDataStruct = {
    owner: AddressLike;
    status: BigNumberish;
    createdAt: BigNumberish;
    triggeredAt: BigNumberish;
    timeLock: IInheritanceCore.TimeLockStruct;
    totalBeneficiaries: BigNumberish;
    requiresConfirmation: boolean;
    executor: AddressLike;
    totalSTTDeposited: BigNumberish;
    totalSTTClaimed: BigNumberish;
  };

  export type InheritanceDataStructOutput = [
    owner: string,
    status: bigint,
    createdAt: bigint,
    triggeredAt: bigint,
    timeLock: IInheritanceCore.TimeLockStructOutput,
    totalBeneficiaries: bigint,
    requiresConfirmation: boolean,
    executor: string,
    totalSTTDeposited: bigint,
    totalSTTClaimed: bigint
  ] & {
    owner: string;
    status: bigint;
    createdAt: bigint;
    triggeredAt: bigint;
    timeLock: IInheritanceCore.TimeLockStructOutput;
    totalBeneficiaries: bigint;
    requiresConfirmation: boolean;
    executor: string;
    totalSTTDeposited: bigint;
    totalSTTClaimed: bigint;
  };

  export type AssetStruct = {
    assetType: BigNumberish;
    contractAddress: AddressLike;
    amount: BigNumberish;
    tokenIds: BigNumberish[];
    isActive: boolean;
    depositedAt: BigNumberish;
  };

  export type AssetStructOutput = [
    assetType: bigint,
    contractAddress: string,
    amount: bigint,
    tokenIds: bigint[],
    isActive: boolean,
    depositedAt: bigint
  ] & {
    assetType: bigint;
    contractAddress: string;
    amount: bigint;
    tokenIds: bigint[];
    isActive: boolean;
    depositedAt: bigint;
  };
}

export interface InheritanceCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EXECUTOR_ROLE"
      | "addBeneficiary"
      | "claimAssets"
      | "createInheritance"
      | "depositERC20"
      | "depositERC721"
      | "depositSTT"
      | "emergencyPause"
      | "getAssetClaimingStatus"
      | "getBeneficiaryInfo"
      | "getClaimableSTT"
      | "getInheritanceData"
      | "getRoleAdmin"
      | "getTotalAssets"
      | "grantRole"
      | "hasClaimedSTT"
      | "hasRole"
      | "onERC721Received"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "triggerInheritance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetClaimed"
      | "AssetDeposited"
      | "AssetDistributionCalculated"
      | "BeneficiaryAdded"
      | "InheritanceCompleted"
      | "InheritanceCreated"
      | "InheritanceTriggered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInheritance",
    values: [AddressLike, boolean, IInheritanceCore.TimeLockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSTT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetClaimingStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableSTT",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInheritanceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedSTT",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerInheritance",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInheritance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositSTT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetClaimingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableSTT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInheritanceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedSTT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerInheritance",
    data: BytesLike
  ): Result;
}

export namespace AssetClaimedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    beneficiary: AddressLike,
    assetType: BigNumberish,
    contractAddress: AddressLike,
    amount: BigNumberish,
    tokenIds: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    beneficiary: string,
    assetType: bigint,
    contractAddress: string,
    amount: bigint,
    tokenIds: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    beneficiary: string;
    assetType: bigint;
    contractAddress: string;
    amount: bigint;
    tokenIds: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetDepositedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    assetType: BigNumberish,
    contractAddress: AddressLike,
    amount: BigNumberish,
    tokenIds: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    assetType: bigint,
    contractAddress: string,
    amount: bigint,
    tokenIds: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    assetType: bigint;
    contractAddress: string;
    amount: bigint;
    tokenIds: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetDistributionCalculatedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    beneficiary: AddressLike,
    assetIndex: BigNumberish,
    tokenCount: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    beneficiary: string,
    assetIndex: bigint,
    tokenCount: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    beneficiary: string;
    assetIndex: bigint;
    tokenCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeneficiaryAddedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    beneficiary: AddressLike,
    allocationBasisPoints: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    beneficiary: string,
    allocationBasisPoints: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    beneficiary: string;
    allocationBasisPoints: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InheritanceCompletedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [inheritanceId: bigint, timestamp: bigint];
  export interface OutputObject {
    inheritanceId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InheritanceCreatedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    owner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    owner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InheritanceTriggeredEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    triggeredBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    triggeredBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    triggeredBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InheritanceCore extends BaseContract {
  connect(runner?: ContractRunner | null): InheritanceCore;
  waitForDeployment(): Promise<this>;

  interface: InheritanceCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EXECUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  addBeneficiary: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      beneficiary: AddressLike,
      allocationBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimAssets: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createInheritance: TypedContractMethod<
    [
      executor: AddressLike,
      requiresConfirmation: boolean,
      timeLock: IInheritanceCore.TimeLockStruct
    ],
    [bigint],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      tokenContract: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositERC721: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      nftContract: AddressLike,
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  depositSTT: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "payable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  getAssetClaimingStatus: TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [boolean[]],
    "view"
  >;

  getBeneficiaryInfo: TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [IInheritanceCore.BeneficiaryStructOutput],
    "view"
  >;

  getClaimableSTT: TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  getInheritanceData: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [IInheritanceCore.InheritanceDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalAssets: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [IInheritanceCore.AssetStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasClaimedSTT: TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  triggerInheritance: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXECUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addBeneficiary"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      beneficiary: AddressLike,
      allocationBasisPoints: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAssets"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createInheritance"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      requiresConfirmation: boolean,
      timeLock: IInheritanceCore.TimeLockStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      tokenContract: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC721"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      nftContract: AddressLike,
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositSTT"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAssetClaimingStatus"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBeneficiaryInfo"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [IInheritanceCore.BeneficiaryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableSTT"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInheritanceData"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish],
    [IInheritanceCore.InheritanceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalAssets"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish],
    [IInheritanceCore.AssetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasClaimedSTT"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, beneficiary: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "triggerInheritance"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AssetClaimed"
  ): TypedContractEvent<
    AssetClaimedEvent.InputTuple,
    AssetClaimedEvent.OutputTuple,
    AssetClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AssetDeposited"
  ): TypedContractEvent<
    AssetDepositedEvent.InputTuple,
    AssetDepositedEvent.OutputTuple,
    AssetDepositedEvent.OutputObject
  >;
  getEvent(
    key: "AssetDistributionCalculated"
  ): TypedContractEvent<
    AssetDistributionCalculatedEvent.InputTuple,
    AssetDistributionCalculatedEvent.OutputTuple,
    AssetDistributionCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "BeneficiaryAdded"
  ): TypedContractEvent<
    BeneficiaryAddedEvent.InputTuple,
    BeneficiaryAddedEvent.OutputTuple,
    BeneficiaryAddedEvent.OutputObject
  >;
  getEvent(
    key: "InheritanceCompleted"
  ): TypedContractEvent<
    InheritanceCompletedEvent.InputTuple,
    InheritanceCompletedEvent.OutputTuple,
    InheritanceCompletedEvent.OutputObject
  >;
  getEvent(
    key: "InheritanceCreated"
  ): TypedContractEvent<
    InheritanceCreatedEvent.InputTuple,
    InheritanceCreatedEvent.OutputTuple,
    InheritanceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InheritanceTriggered"
  ): TypedContractEvent<
    InheritanceTriggeredEvent.InputTuple,
    InheritanceTriggeredEvent.OutputTuple,
    InheritanceTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AssetClaimed(uint256,address,uint8,address,uint256,uint256[],uint256)": TypedContractEvent<
      AssetClaimedEvent.InputTuple,
      AssetClaimedEvent.OutputTuple,
      AssetClaimedEvent.OutputObject
    >;
    AssetClaimed: TypedContractEvent<
      AssetClaimedEvent.InputTuple,
      AssetClaimedEvent.OutputTuple,
      AssetClaimedEvent.OutputObject
    >;

    "AssetDeposited(uint256,uint8,address,uint256,uint256[],uint256)": TypedContractEvent<
      AssetDepositedEvent.InputTuple,
      AssetDepositedEvent.OutputTuple,
      AssetDepositedEvent.OutputObject
    >;
    AssetDeposited: TypedContractEvent<
      AssetDepositedEvent.InputTuple,
      AssetDepositedEvent.OutputTuple,
      AssetDepositedEvent.OutputObject
    >;

    "AssetDistributionCalculated(uint256,address,uint256,uint256)": TypedContractEvent<
      AssetDistributionCalculatedEvent.InputTuple,
      AssetDistributionCalculatedEvent.OutputTuple,
      AssetDistributionCalculatedEvent.OutputObject
    >;
    AssetDistributionCalculated: TypedContractEvent<
      AssetDistributionCalculatedEvent.InputTuple,
      AssetDistributionCalculatedEvent.OutputTuple,
      AssetDistributionCalculatedEvent.OutputObject
    >;

    "BeneficiaryAdded(uint256,address,uint256,uint256)": TypedContractEvent<
      BeneficiaryAddedEvent.InputTuple,
      BeneficiaryAddedEvent.OutputTuple,
      BeneficiaryAddedEvent.OutputObject
    >;
    BeneficiaryAdded: TypedContractEvent<
      BeneficiaryAddedEvent.InputTuple,
      BeneficiaryAddedEvent.OutputTuple,
      BeneficiaryAddedEvent.OutputObject
    >;

    "InheritanceCompleted(uint256,uint256)": TypedContractEvent<
      InheritanceCompletedEvent.InputTuple,
      InheritanceCompletedEvent.OutputTuple,
      InheritanceCompletedEvent.OutputObject
    >;
    InheritanceCompleted: TypedContractEvent<
      InheritanceCompletedEvent.InputTuple,
      InheritanceCompletedEvent.OutputTuple,
      InheritanceCompletedEvent.OutputObject
    >;

    "InheritanceCreated(uint256,address,uint256)": TypedContractEvent<
      InheritanceCreatedEvent.InputTuple,
      InheritanceCreatedEvent.OutputTuple,
      InheritanceCreatedEvent.OutputObject
    >;
    InheritanceCreated: TypedContractEvent<
      InheritanceCreatedEvent.InputTuple,
      InheritanceCreatedEvent.OutputTuple,
      InheritanceCreatedEvent.OutputObject
    >;

    "InheritanceTriggered(uint256,address,uint256)": TypedContractEvent<
      InheritanceTriggeredEvent.InputTuple,
      InheritanceTriggeredEvent.OutputTuple,
      InheritanceTriggeredEvent.OutputObject
    >;
    InheritanceTriggered: TypedContractEvent<
      InheritanceTriggeredEvent.InputTuple,
      InheritanceTriggeredEvent.OutputTuple,
      InheritanceTriggeredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
