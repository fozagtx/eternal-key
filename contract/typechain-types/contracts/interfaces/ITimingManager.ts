/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITimingManager {
  export type TimingConfigStruct = {
    minVestingDuration: BigNumberish;
    defaultExecutionDelay: BigNumberish;
    defaultCliffDuration: BigNumberish;
    maxVestingDuration: BigNumberish;
    isConfigurable: boolean;
  };

  export type TimingConfigStructOutput = [
    minVestingDuration: bigint,
    defaultExecutionDelay: bigint,
    defaultCliffDuration: bigint,
    maxVestingDuration: bigint,
    isConfigurable: boolean
  ] & {
    minVestingDuration: bigint;
    defaultExecutionDelay: bigint;
    defaultCliffDuration: bigint;
    maxVestingDuration: bigint;
    isConfigurable: boolean;
  };
}

export interface ITimingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getGlobalTiming"
      | "getInheritanceTiming"
      | "setCustomTiming"
      | "setProductionMode"
      | "setTestingMode"
      | "setTimingConfigurable"
      | "updateGlobalTiming"
      | "updateInheritanceTiming"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GlobalTimingUpdated" | "TimingConfigUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getGlobalTiming",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInheritanceTiming",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomTiming",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductionMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestingMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimingConfigurable",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalTiming",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInheritanceTiming",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGlobalTiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInheritanceTiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomTiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestingMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimingConfigurable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalTiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInheritanceTiming",
    data: BytesLike
  ): Result;
}

export namespace GlobalTimingUpdatedEvent {
  export type InputTuple = [
    minVestingDuration: BigNumberish,
    defaultExecutionDelay: BigNumberish,
    defaultCliffDuration: BigNumberish,
    updatedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    minVestingDuration: bigint,
    defaultExecutionDelay: bigint,
    defaultCliffDuration: bigint,
    updatedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    minVestingDuration: bigint;
    defaultExecutionDelay: bigint;
    defaultCliffDuration: bigint;
    updatedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimingConfigUpdatedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    minVestingDuration: BigNumberish,
    defaultExecutionDelay: BigNumberish,
    defaultCliffDuration: BigNumberish,
    updatedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    minVestingDuration: bigint,
    defaultExecutionDelay: bigint,
    defaultCliffDuration: bigint,
    updatedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    minVestingDuration: bigint;
    defaultExecutionDelay: bigint;
    defaultCliffDuration: bigint;
    updatedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITimingManager extends BaseContract {
  connect(runner?: ContractRunner | null): ITimingManager;
  waitForDeployment(): Promise<this>;

  interface: ITimingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getGlobalTiming: TypedContractMethod<
    [],
    [ITimingManager.TimingConfigStructOutput],
    "view"
  >;

  getInheritanceTiming: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [ITimingManager.TimingConfigStructOutput],
    "view"
  >;

  setCustomTiming: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      vestingSeconds: BigNumberish,
      delaySeconds: BigNumberish,
      cliffSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setProductionMode: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTestingMode: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimingConfigurable: TypedContractMethod<
    [inheritanceId: BigNumberish, configurable: boolean],
    [void],
    "nonpayable"
  >;

  updateGlobalTiming: TypedContractMethod<
    [
      minVestingDuration: BigNumberish,
      defaultExecutionDelay: BigNumberish,
      defaultCliffDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateInheritanceTiming: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      minVestingDuration: BigNumberish,
      defaultExecutionDelay: BigNumberish,
      defaultCliffDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getGlobalTiming"
  ): TypedContractMethod<[], [ITimingManager.TimingConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getInheritanceTiming"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish],
    [ITimingManager.TimingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCustomTiming"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      vestingSeconds: BigNumberish,
      delaySeconds: BigNumberish,
      cliffSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProductionMode"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTestingMode"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimingConfigurable"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, configurable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateGlobalTiming"
  ): TypedContractMethod<
    [
      minVestingDuration: BigNumberish,
      defaultExecutionDelay: BigNumberish,
      defaultCliffDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateInheritanceTiming"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      minVestingDuration: BigNumberish,
      defaultExecutionDelay: BigNumberish,
      defaultCliffDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GlobalTimingUpdated"
  ): TypedContractEvent<
    GlobalTimingUpdatedEvent.InputTuple,
    GlobalTimingUpdatedEvent.OutputTuple,
    GlobalTimingUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TimingConfigUpdated"
  ): TypedContractEvent<
    TimingConfigUpdatedEvent.InputTuple,
    TimingConfigUpdatedEvent.OutputTuple,
    TimingConfigUpdatedEvent.OutputObject
  >;

  filters: {
    "GlobalTimingUpdated(uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      GlobalTimingUpdatedEvent.InputTuple,
      GlobalTimingUpdatedEvent.OutputTuple,
      GlobalTimingUpdatedEvent.OutputObject
    >;
    GlobalTimingUpdated: TypedContractEvent<
      GlobalTimingUpdatedEvent.InputTuple,
      GlobalTimingUpdatedEvent.OutputTuple,
      GlobalTimingUpdatedEvent.OutputObject
    >;

    "TimingConfigUpdated(uint256,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      TimingConfigUpdatedEvent.InputTuple,
      TimingConfigUpdatedEvent.OutputTuple,
      TimingConfigUpdatedEvent.OutputObject
    >;
    TimingConfigUpdated: TypedContractEvent<
      TimingConfigUpdatedEvent.InputTuple,
      TimingConfigUpdatedEvent.OutputTuple,
      TimingConfigUpdatedEvent.OutputObject
    >;
  };
}
