/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IInheritanceCore {
  export type DeadManSwitchStruct = {
    owner: AddressLike;
    beneficiary: AddressLike;
    deadline: BigNumberish;
    lastCheckIn: BigNumberish;
    createdAt: BigNumberish;
    balance: BigNumberish;
    status: BigNumberish;
  };

  export type DeadManSwitchStructOutput = [
    owner: string,
    beneficiary: string,
    deadline: bigint,
    lastCheckIn: bigint,
    createdAt: bigint,
    balance: bigint,
    status: bigint
  ] & {
    owner: string;
    beneficiary: string;
    deadline: bigint;
    lastCheckIn: bigint;
    createdAt: bigint;
    balance: bigint;
    status: bigint;
  };
}

export interface IInheritanceCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "checkIn"
      | "claim"
      | "deposit"
      | "getBalance"
      | "getBeneficiary"
      | "getDeadline"
      | "getLastCheckIn"
      | "getOwner"
      | "getStatus"
      | "getSwitch"
      | "getTimeRemaining"
      | "initialize"
      | "isDeadlineExpired"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CheckInPerformed"
      | "DepositMade"
      | "FundsClaimed"
      | "SwitchCancelled"
      | "SwitchInitialized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCheckIn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSwitch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeadlineExpired",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwitch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeadlineExpired",
    data: BytesLike
  ): Result;
}

export namespace CheckInPerformedEvent {
  export type InputTuple = [
    owner: AddressLike,
    newDeadline: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    newDeadline: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    newDeadline: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositMadeEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    newBalance: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    amount: bigint,
    newBalance: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    newBalance: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsClaimedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwitchCancelledEvent {
  export type InputTuple = [
    owner: AddressLike,
    refundAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    refundAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    refundAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwitchInitializedEvent {
  export type InputTuple = [
    owner: AddressLike,
    beneficiary: AddressLike,
    deadline: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    beneficiary: string,
    deadline: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    beneficiary: string;
    deadline: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInheritanceCore extends BaseContract {
  connect(runner?: ContractRunner | null): IInheritanceCore;
  waitForDeployment(): Promise<this>;

  interface: IInheritanceCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[], [void], "nonpayable">;

  checkIn: TypedContractMethod<
    [newDeadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[], [void], "payable">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getBeneficiary: TypedContractMethod<[], [string], "view">;

  getDeadline: TypedContractMethod<[], [bigint], "view">;

  getLastCheckIn: TypedContractMethod<[], [bigint], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getStatus: TypedContractMethod<[], [bigint], "view">;

  getSwitch: TypedContractMethod<
    [],
    [IInheritanceCore.DeadManSwitchStructOutput],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [beneficiary: AddressLike, deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  isDeadlineExpired: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[newDeadline: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastCheckIn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSwitch"
  ): TypedContractMethod<
    [],
    [IInheritanceCore.DeadManSwitchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [beneficiary: AddressLike, deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDeadlineExpired"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CheckInPerformed"
  ): TypedContractEvent<
    CheckInPerformedEvent.InputTuple,
    CheckInPerformedEvent.OutputTuple,
    CheckInPerformedEvent.OutputObject
  >;
  getEvent(
    key: "DepositMade"
  ): TypedContractEvent<
    DepositMadeEvent.InputTuple,
    DepositMadeEvent.OutputTuple,
    DepositMadeEvent.OutputObject
  >;
  getEvent(
    key: "FundsClaimed"
  ): TypedContractEvent<
    FundsClaimedEvent.InputTuple,
    FundsClaimedEvent.OutputTuple,
    FundsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SwitchCancelled"
  ): TypedContractEvent<
    SwitchCancelledEvent.InputTuple,
    SwitchCancelledEvent.OutputTuple,
    SwitchCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SwitchInitialized"
  ): TypedContractEvent<
    SwitchInitializedEvent.InputTuple,
    SwitchInitializedEvent.OutputTuple,
    SwitchInitializedEvent.OutputObject
  >;

  filters: {
    "CheckInPerformed(address,uint256,uint256)": TypedContractEvent<
      CheckInPerformedEvent.InputTuple,
      CheckInPerformedEvent.OutputTuple,
      CheckInPerformedEvent.OutputObject
    >;
    CheckInPerformed: TypedContractEvent<
      CheckInPerformedEvent.InputTuple,
      CheckInPerformedEvent.OutputTuple,
      CheckInPerformedEvent.OutputObject
    >;

    "DepositMade(address,uint256,uint256,uint256)": TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;
    DepositMade: TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;

    "FundsClaimed(address,uint256,uint256)": TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;
    FundsClaimed: TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;

    "SwitchCancelled(address,uint256,uint256)": TypedContractEvent<
      SwitchCancelledEvent.InputTuple,
      SwitchCancelledEvent.OutputTuple,
      SwitchCancelledEvent.OutputObject
    >;
    SwitchCancelled: TypedContractEvent<
      SwitchCancelledEvent.InputTuple,
      SwitchCancelledEvent.OutputTuple,
      SwitchCancelledEvent.OutputObject
    >;

    "SwitchInitialized(address,address,uint256,uint256)": TypedContractEvent<
      SwitchInitializedEvent.InputTuple,
      SwitchInitializedEvent.OutputTuple,
      SwitchInitializedEvent.OutputObject
    >;
    SwitchInitialized: TypedContractEvent<
      SwitchInitializedEvent.InputTuple,
      SwitchInitializedEvent.OutputTuple,
      SwitchInitializedEvent.OutputObject
    >;
  };
}
