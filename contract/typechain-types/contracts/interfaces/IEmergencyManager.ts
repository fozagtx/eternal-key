/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEmergencyManager {
  export type DisputeDataStruct = {
    disputant: AddressLike;
    respondent: AddressLike;
    reason: string;
    evidence: BytesLike;
    arbitrator: AddressLike;
    raisedAt: BigNumberish;
    resolvedAt: BigNumberish;
    isResolved: boolean;
    disputantWon: boolean;
  };

  export type DisputeDataStructOutput = [
    disputant: string,
    respondent: string,
    reason: string,
    evidence: string,
    arbitrator: string,
    raisedAt: bigint,
    resolvedAt: bigint,
    isResolved: boolean,
    disputantWon: boolean
  ] & {
    disputant: string;
    respondent: string;
    reason: string;
    evidence: string;
    arbitrator: string;
    raisedAt: bigint;
    resolvedAt: bigint;
    isResolved: boolean;
    disputantWon: boolean;
  };

  export type EmergencyRequestStruct = {
    emergencyType: BigNumberish;
    status: BigNumberish;
    requestedBy: AddressLike;
    requestedAt: BigNumberish;
    approvedAt: BigNumberish;
    executionDelay: BigNumberish;
    reason: string;
    evidence: BytesLike;
    approvers: AddressLike[];
    isExecuted: boolean;
  };

  export type EmergencyRequestStructOutput = [
    emergencyType: bigint,
    status: bigint,
    requestedBy: string,
    requestedAt: bigint,
    approvedAt: bigint,
    executionDelay: bigint,
    reason: string,
    evidence: string,
    approvers: string[],
    isExecuted: boolean
  ] & {
    emergencyType: bigint;
    status: bigint;
    requestedBy: string;
    requestedAt: bigint;
    approvedAt: bigint;
    executionDelay: bigint;
    reason: string;
    evidence: string;
    approvers: string[];
    isExecuted: boolean;
  };
}

export interface IEmergencyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveEmergency"
      | "executeEmergency"
      | "freezeAssets"
      | "getDispute"
      | "getEmergencyRequest"
      | "isAssetsFreezed"
      | "raiseDispute"
      | "raiseEmergency"
      | "resolveDispute"
      | "unfreezeAssets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetsFreezed"
      | "AssetsUnfreezed"
      | "DisputeRaised"
      | "DisputeResolved"
      | "EmergencyApproved"
      | "EmergencyExecuted"
      | "EmergencyRaised"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveEmergency",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergency",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetsFreezed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish, AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseEmergency",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeAssets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAssetsFreezed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeAssets",
    data: BytesLike
  ): Result;
}

export namespace AssetsFreezedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    freezer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    freezer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    freezer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetsUnfreezedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    unfreezer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    unfreezer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    unfreezer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    disputeId: BigNumberish,
    disputant: AddressLike,
    respondent: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    disputeId: bigint,
    disputant: string,
    respondent: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    disputeId: bigint;
    disputant: string;
    respondent: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    disputeId: BigNumberish,
    arbitrator: AddressLike,
    disputantWon: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    disputeId: bigint,
    arbitrator: string,
    disputantWon: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    disputeId: bigint;
    arbitrator: string;
    disputantWon: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyApprovedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    emergencyId: BigNumberish,
    approver: AddressLike,
    executionDelay: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    emergencyId: bigint,
    approver: string,
    executionDelay: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    emergencyId: bigint;
    approver: string;
    executionDelay: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyExecutedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    emergencyId: BigNumberish,
    executor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    emergencyId: bigint,
    executor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    emergencyId: bigint;
    executor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyRaisedEvent {
  export type InputTuple = [
    inheritanceId: BigNumberish,
    emergencyId: BigNumberish,
    emergencyType: BigNumberish,
    requestedBy: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    inheritanceId: bigint,
    emergencyId: bigint,
    emergencyType: bigint,
    requestedBy: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    inheritanceId: bigint;
    emergencyId: bigint;
    emergencyType: bigint;
    requestedBy: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEmergencyManager extends BaseContract {
  connect(runner?: ContractRunner | null): IEmergencyManager;
  waitForDeployment(): Promise<this>;

  interface: IEmergencyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveEmergency: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      emergencyId: BigNumberish,
      executionDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  executeEmergency: TypedContractMethod<
    [inheritanceId: BigNumberish, emergencyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  freezeAssets: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDispute: TypedContractMethod<
    [inheritanceId: BigNumberish, disputeId: BigNumberish],
    [IEmergencyManager.DisputeDataStructOutput],
    "view"
  >;

  getEmergencyRequest: TypedContractMethod<
    [inheritanceId: BigNumberish, emergencyId: BigNumberish],
    [IEmergencyManager.EmergencyRequestStructOutput],
    "view"
  >;

  isAssetsFreezed: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [boolean],
    "view"
  >;

  raiseDispute: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      respondent: AddressLike,
      reason: string,
      evidence: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  raiseEmergency: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      emergencyType: BigNumberish,
      reason: string,
      evidence: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      disputeId: BigNumberish,
      disputantWon: boolean
    ],
    [void],
    "nonpayable"
  >;

  unfreezeAssets: TypedContractMethod<
    [inheritanceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveEmergency"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      emergencyId: BigNumberish,
      executionDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeEmergency"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, emergencyId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeAssets"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDispute"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, disputeId: BigNumberish],
    [IEmergencyManager.DisputeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencyRequest"
  ): TypedContractMethod<
    [inheritanceId: BigNumberish, emergencyId: BigNumberish],
    [IEmergencyManager.EmergencyRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAssetsFreezed"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      respondent: AddressLike,
      reason: string,
      evidence: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "raiseEmergency"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      emergencyType: BigNumberish,
      reason: string,
      evidence: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [
      inheritanceId: BigNumberish,
      disputeId: BigNumberish,
      disputantWon: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unfreezeAssets"
  ): TypedContractMethod<[inheritanceId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AssetsFreezed"
  ): TypedContractEvent<
    AssetsFreezedEvent.InputTuple,
    AssetsFreezedEvent.OutputTuple,
    AssetsFreezedEvent.OutputObject
  >;
  getEvent(
    key: "AssetsUnfreezed"
  ): TypedContractEvent<
    AssetsUnfreezedEvent.InputTuple,
    AssetsUnfreezedEvent.OutputTuple,
    AssetsUnfreezedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyApproved"
  ): TypedContractEvent<
    EmergencyApprovedEvent.InputTuple,
    EmergencyApprovedEvent.OutputTuple,
    EmergencyApprovedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyExecuted"
  ): TypedContractEvent<
    EmergencyExecutedEvent.InputTuple,
    EmergencyExecutedEvent.OutputTuple,
    EmergencyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyRaised"
  ): TypedContractEvent<
    EmergencyRaisedEvent.InputTuple,
    EmergencyRaisedEvent.OutputTuple,
    EmergencyRaisedEvent.OutputObject
  >;

  filters: {
    "AssetsFreezed(uint256,address,uint256)": TypedContractEvent<
      AssetsFreezedEvent.InputTuple,
      AssetsFreezedEvent.OutputTuple,
      AssetsFreezedEvent.OutputObject
    >;
    AssetsFreezed: TypedContractEvent<
      AssetsFreezedEvent.InputTuple,
      AssetsFreezedEvent.OutputTuple,
      AssetsFreezedEvent.OutputObject
    >;

    "AssetsUnfreezed(uint256,address,uint256)": TypedContractEvent<
      AssetsUnfreezedEvent.InputTuple,
      AssetsUnfreezedEvent.OutputTuple,
      AssetsUnfreezedEvent.OutputObject
    >;
    AssetsUnfreezed: TypedContractEvent<
      AssetsUnfreezedEvent.InputTuple,
      AssetsUnfreezedEvent.OutputTuple,
      AssetsUnfreezedEvent.OutputObject
    >;

    "DisputeRaised(uint256,uint256,address,address,string,uint256)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(uint256,uint256,address,bool,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "EmergencyApproved(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      EmergencyApprovedEvent.InputTuple,
      EmergencyApprovedEvent.OutputTuple,
      EmergencyApprovedEvent.OutputObject
    >;
    EmergencyApproved: TypedContractEvent<
      EmergencyApprovedEvent.InputTuple,
      EmergencyApprovedEvent.OutputTuple,
      EmergencyApprovedEvent.OutputObject
    >;

    "EmergencyExecuted(uint256,uint256,address,uint256)": TypedContractEvent<
      EmergencyExecutedEvent.InputTuple,
      EmergencyExecutedEvent.OutputTuple,
      EmergencyExecutedEvent.OutputObject
    >;
    EmergencyExecuted: TypedContractEvent<
      EmergencyExecutedEvent.InputTuple,
      EmergencyExecutedEvent.OutputTuple,
      EmergencyExecutedEvent.OutputObject
    >;

    "EmergencyRaised(uint256,uint256,uint8,address,string,uint256)": TypedContractEvent<
      EmergencyRaisedEvent.InputTuple,
      EmergencyRaisedEvent.OutputTuple,
      EmergencyRaisedEvent.OutputObject
    >;
    EmergencyRaised: TypedContractEvent<
      EmergencyRaisedEvent.InputTuple,
      EmergencyRaisedEvent.OutputTuple,
      EmergencyRaisedEvent.OutputObject
    >;
  };
}
